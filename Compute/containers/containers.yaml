name: Radius.Compute
types:
  containers:
    apiVersions:
      '2025-08-01-preview':
        schema: 
          type: object
          properties:
            environment:
              type: string
              description: (Required) The Radius Environment ID. Typically set by the rad CLI. Typically value should be `environment`.
            application:
              type: string
              description: (Required) The Radius Application ID. `myApplication.id` for example.
            connections:
              type: object
              description: '(Optional) Map of resources this container is dependent upon. `db: { source: db.id } for example.'
              additionalProperties:
                source:
                  type: string
                  description: (Optional) The resource ID of the resource this container is dependent upon.]
            # Change: Container is now an array. This brings Radius into conformance with Kubernetes Pods, ACI Container Groups, and ECS Tasks.
            containers:
              # Equivilent properties: 
                #     Kubernetes: pod.spec.containers[]
                #     ECS Task: TaskDefinition.containerDefinitions[]
                #     ACI Container Group: containerGroups.containers[]
                #     ACA Container App: containerApps.template.container[]
                #     Google Cloud Run: Service.spec.template.spec.containers[]
              type: array
              items:
                type: object
                properties:
                  image:
                    # Equivilent properties: 
                      #     Kubernetes: pod.spec.ontainers[].image
                      #     ECS Task: TaskDefinition.containerDefinitions[].image
                      #     ACI Container Group: containerGroups.properties.containers[].properties.image
                      #     ACA Container App: containerApps.properties.template.container[].image
                      #     Google Cloud Run: Service.spec.template.spec.containers[].image
                    type: string
                    description: (Required) The container image. `ghcr.io/radius-project/samples/demo:latest` for example.
                  # Change: imagePullPolicy was removed from Container resource type. The imagePullPolicy is only implemented by Kubernetes. It is not available in ECS, ACI, ACA, or Google Cloud Run. 
                  # Change: Command is now an array. This brings Radius into conformance with Kubernetes Pods, ACI Container Groups, and ECS Tasks.
                  command:
                    # Equivilent properties: 
                      #     Kubernetes: pod.spec.containers[].command[]
                      #     ECS Task: TaskDefinition.containerDefinitions[].command[]
                      #     ACI Container Group: containerGroups.properties.containers[].properties.command[]
                      #     ACA Container App: containerApps.properties.template.container[].command[]
                      #     Google Cloud Run: Service.spec.template.spec.containers[].command[]
                    type: array
                    items:
                      type: string
                      description: '(Optional) Command the container runs. Overrides the container image ENTRYPOINT. `["/bin/sh", "-c"]` for example.'
                  # Change: Args is now an array. This brings Radius into conformance with Kubernetes Pods, ACI Container Groups, and ECS Tasks.
                  args:
                    # Equivilent properties: 
                      #     Kubernetes: pod.spec.containers[].args[]
                      #     ECS Task: Not available
                      #     ACI Container Group: Not available
                      #     ACA Container App: containerApps.properties.template.container[].args[]
                      #     Google Cloud Run: Service.spec.template.spec.containers[].args[]
                    type: array
                    items:
                      type: string
                      description: '(Optional) Arguments for the command. Overrides the container image CMD. `["echo Hello", "&&", "echo World"]` for example.'
                  env:
                    # Equivilent properties: 
                      #     Kubernetes: pod.spec.containers[].env[]
                      #     ECS Task: TaskDefinition.containerDefinitions[].environment[]
                      #     ACI Container Group: containerGroups.properties.containers[].properties.environmentVariables[]
                      #     ACA Container App: containerApps.properties.template.container[].env[]
                      #     Google Cloud Run: Service.spec.template.spec.containers[].env[]
                    type: object
                    description: (Optional) Environment variables injected into the container. 
                    additionalProperties:
                      value:
                        # Equivilent properties: 
                          #     Kubernetes: pod.spec.containers[].env[].value
                          #     ECS Task: TaskDefinition.containerDefinitions[].environment[].value
                          #     ACI Container Group: containerGroups.properties.containers[].properties.environmentVariables[].value
                          #     ACA Container App: containerApps.properties.template.container[].env[].value
                          #     Google Cloud Run: Service.spec.template.spec.containers[].env[].value
                        type: string
                        description: (Optional) String value of the environment variable.
                      valueFrom:
                        type: object
                        properties:
                          # Change: secretRef --> secretKeyRef to be the same as Kubernetes
                          secretKeyRef:
                            # Equivilent properties: 
                              #     Kubernetes: pod.spec.containers[].env[].valueFrom.secretKeyRef
                              #     ECS Task: TaskDefinition.containerDefinitions[].secrets[].valueFrom
                              #     ACI Container Group: containerGroups.properties.containers[].properties.environmentVariables[].secureValueReference
                              #     ACA Container App: containerApps.properties.template.container[].env[].secretRef
                              #     Google Cloud Run: Service.spec.template.spec.containers[].env[].valueFrom.secretKeyRef
                            type: object
                            description: (Optional) Set the environment variable value based on a Radius Secrets resource.
                            properties:
                              # Change: source --> secretId to be more precise.
                              secretId:
                                type: string
                                description: (Optional) The ID of the Radius Secrets resource.
                              key:
                                # Equivilent properties: 
                                  #     Kubernetes: pod.spec.containers[].env[].valueFrom.secretKeyRef
                                  #     ECS Task: N/A
                                  #     ACI Container Group: N/A
                                  #     ACA Container App: N/A
                                  #     Google Cloud Run: Service.spec.template.spec.containers[].env[].valueFrom.secretKeyRef.key
                                type: string
                                description: (Optional) The key of the Radius Secrets resource. The value of the key will be used as the environment variable value.
                  workingDir:
                    # Equivilent properties: 
                      #     Kubernetes: pod.spec.containers[].workingDir
                      #     ECS Task: TaskDefinition.containerDefinitions[].workingDirectory
                      #     ACI Container Group: Not available
                      #     ACA Container App: Not available
                      #     Google Cloud Run: Service.spec.template.spec.containers[].workingDir
                    type: string
                    description: (Optional) The working directory inside the container. `/usr/share` for example.
                  # New. Future functionality should include GPU resources.
                  resources:
                    type: object
                    description: (Optional) Compute resource requirements for the container.
                    properties:
                      requests:
                        type: object
                        description: (Optional) Requests define the minimum amount of CPU or memory that is required by the container.
                        properties:
                        cpu:
                          # Equivilent properties: 
                            #     Kubernetes: pod.spec.containers[].resources.requests.cpu
                            #     ECS Task: TaskDefinition.containerDefinitions[].cpu
                            #     ACI Container Group: containerGroups.properties.containers[].resources.requests.cpu
                            #     ACA Container App: containerApps.properties.template.container[].resources.cpu
                            #     Google Cloud Run: Service.spec.template.spec.containers[].resources.requests.cpu
                          type: float
                          description: (Optional) The minimum number of vCPUs required by the container. `0.1` results in one tenth of a vCPU being reserved.
                        memoryInMib:
                          # Equivilent properties: 
                            #     Kubernetes: pod.spec.containers[].resources.requests.memory
                            #     ECS Task: TaskDefinition.containerDefinitions[].memory
                            #     ACI Container Group: containerGroups.properties.containers[].resources.requests.memoryinGb
                            #     ACA Container App: containerApps.properties.template.container[].resources.memory
                            #     Google Cloud Run: Service.spec.template.spec.containers[].resources.requests.memory
                          type: integer
                          description: (Optional) The minimum amount of memory required by the container in MiB. `1024` results in 1 GiB of memory being reserved.
                      limits:
                        # Equivilent properties: Same as requests
                        cpu:
                          type: float
                          description: (Optional) The maximum number of vCPUs which can be used by the container.
                        memoryInMiB:
                          type: integer
                          description: (Optional) The maximum amount of memory which can be used by the container in MiB.
                  ports:
                    type: object
                    description: (Optional) Network ports exposed by the container. A network endpoint is created for each port. When using Kubernetes a Service with type ClusterIP is created. For L7 ingress create a Gateway resource.
                    additionalProperties:
                      containerPort:
                        # Equivilent properties: 
                          #     Kubernetes: pod.spec.containers[].ports.containerPort
                          #     ECS Task: TaskDefinition.containerDefinitions[].portMappings.containerPort
                          #     ACI Container Group: containerGroups.properties.containers[].ports.port
                          #     ACA Container App: containerApps.properties.configuration.ingress.targetPort
                          #     Google Cloud Run: Service.spec.template.spec.containers[].ports.containerPort
                        type: integer
                        description: (Required) The network port the container is listening on. `443` for example.
                      protocol:
                        # Equivilent properties: 
                          #     Kubernetes: pod.spec.containers[].ports.protocol
                          #     ECS Task: TaskDefinition.containerDefinitions[].portMappings.protocol
                          #     ACI Container Group: containerGroups.properties.containers[].ports.protocol
                          #     ACA Container App: Not available. Appears to only support TCP or L7.
                          #     Google Cloud Run: Service.spec.template.spec.containers[].ports.protocol
                        type: string
                        enum: [TCP, UDP]
                        description: (Optional) The protocol. If not specified, `TCP` is assumed.
                    required: [containerPort]
                  # Change: volumes --> volumeMounts to be more precise.
                  # Change: kind is now on the Volumes resource
                  # Change: rbac is now accessMode on the Volume resource
                  # Change: RAM disks are no longer supported so managedStore is removed
                  volumeMounts:
                    # Equivilent properties: 
                      #     Kubernetes: pod.spec.containers[].volumeMounts
                      #     ECS Task: TaskDefinition.containerDefinitions[].volumesFrom
                      #     ACI Container Group: containerGroups.properties.containers[].volumeMounts
                      #     ACA Container App: containerApps.template.containers[].volumeMounts
                      #     Google Cloud Run: Service.spec.template.spec.containers[].volumeMounts
                    type: object
                    description: (Optional) Volumes to mount in the container.
                    additionalProperties:
                      type: object
                      properties:
                        # Change: source --> volumeId to be more precise.
                        volumeId:
                          type: string
                          description: (Required) The ID of the Radius Volumes resource.
                        mountPath:
                          # Equivilent properties: 
                            #     Kubernetes: pod.spec.containers[].volumeMounts.mountPath
                            #     ECS Task: Not available.
                            #     ACI Container Group: containerGroups.properties.containers[].volumeMounts.mountPath
                            #     ACA Container App: containerApps.template.containers[].volumeMounts.mountPath
                            #     Google Cloud Run: Service.spec.template.spec.containers[].volumeMounts.mountPath
                          type: string
                          description: (Required) The path to mount the volume in the container file system.
                        # New
                        readOnly: 
                          # Equivilent properties: 
                            #     Kubernetes: pod.spec.containers[].volumeMounts.readOnly
                            #     ECS Task: TaskDefinition.containerDefinitions[].volumesFrom.readOnly
                            #     ACI Container Group: containerGroups.properties.containers[].volumeMounts.readOnly
                            #     ACA Container App: Not available.
                            #     Google Cloud Run: Service.spec.template.spec.containers[].volumeMounts.readOnly
                          type: boolean
                          description: (Optional) The volume is mounted as read-only if true. If not set assumed to be false.
                    required: [volumeId, mountPath]
                  # Change: readinessProbes are now modeled exactly as Kubernetes readinessProbes. gRPC probe types are omitted since they require platform-specific knowledge. 
                  # Equivilent properties was not analived for readinessProbes
                  readinessProbe:
                    type: object
                    description: (Optional) A readiness probe defines a check (a probe) to determine when a container is ready to begin accepting traffic.
                    properties:
                      exec:
                        type: object
                        description: (Optional) An exec probe runs a command within a container. If the command succeeds and returns 0 the probe is healthy. 
                        properties:
                          command:
                            type: array
                            items:
                              type: string
                              description: '(Required) The command to run inside the container. `["cat", "/tmp/healthy"]` for example.'
                        required: [command]
                      httpGet:
                        type: object
                        description: (Optional) A httpGet probe performs a HTTP GET against the container on the specified port. If the HTTP server returns a code greater than or equal to 200 and less than 400 the probe is healthy.
                        properties:
                          path:
                            type: string
                            description: (Required) The path to access on the HTTP server.
                          port:
                            type: integer
                            description: (Required) The TCP port connect to on the container.
                          httpHeaders:
                            type: object
                            description: (Optional) Custom HTTP headers to be included in the GET request.
                            additionalProperties:
                              value:
                                type: string
                                description: (Required) The header field value.
                            required: [value]
                          scheme:
                            type: string
                            enum: [http, https]
                            description: (Optional) HTTP or HTTPS. Assumes HTTP is not specified.
                        required: [path, port]
                      tcpSocket:
                        type: object
                        description: (Optional) A TCP socket probe establishes a TCP connection to the container on the specified port. If a connection is established the probe is healthy.
                        properties:
                          port:
                            type: integer
                            description: (Required) The TCP port to connect to. 
                        required: [port]
                      initialDelaySeconds:
                        type: integer
                        description: (Optional) Number of seconds after the container has started before probes are initiated.
                      terminationGracePeriodSeconds:
                        type: integer
                        description: (Optional) Number of seconds the container needs to terminate gracefully upon probe failure. The grace period amount of tie between when a container is sent a termination signal and the time when the processes are forcibly halted with a kill signal. 
                      periodSeconds:
                        type: integer
                        description: (Optional) How often to perform the probe. Assumed to be 10 seconds if not specified.
                      timeoutSeconds:
                        type: integer
                        description: (Optional) Number of seconds after which the probe times out. Assumed to be 1 second if not specified.
                      failureThreshold:
                        type: integer
                        decription: (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Assumed to be 3 if not specified.
                      successThreshold: 
                        type: integer
                        description: (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Assumed to be 1 if not specified.
                  # Change: livenessProbes are now modeled exactly as Kubernetes readinessProbes. gRPC probe types are omitted since they require platform-specific knowledge. 
                  # Equivilent properties was not analived for livenessProbe
                  livenessProbe:
                    # livenessProbe properties are the same as readinessProbe. Future functionality should enable referencing a previously defined object.
                    type: object
                    description: (Optional) A liveness probe defines a check (a probe) to determine if a container is healthy.
                    properties:
                      exec:
                        type: object
                        description: (Optional) An exec probe runs a command within a container. If the command succeeds and returns 0 the probe is healthy. 
                        properties:
                          command:
                            type: array
                            items:
                              type: string
                              description: '(Required) The command to run inside the container. `["cat", "/tmp/healthy"]` for example.'
                        required: [command]
                      httpGet:
                        type: object
                        description: (Optional) A httpGet probe performs a HTTP GET against the container on the specified port. If the HTTP server returns a code greater than or equal to 200 and less than 400 the probe is healthy.
                        properties:
                          path:
                            type: string
                            description: (Required) The path to access on the HTTP server.
                          port:
                            type: integer
                            description: (Required) The TCP port connect to on the container.
                          httpHeaders:
                            type: object
                            description: (Optional) Custom HTTP headers to be included in the GET request.
                            additionalProperties:
                              value:
                                type: string
                                description: (Required) The header field value.
                            required: [value]
                          scheme:
                            type: string
                            enum: [http, https]
                            description: (Optional) HTTP or HTTPS. Assumes HTTP is not specified.
                        required: [path, port]
                      tcpSocket:
                        type: object
                        description: (Optional) A TCP socket probe establishes a TCP connection to the container on the specified port. If a connection is established the probe is healthy.
                        properties:
                          port:
                            type: integer
                            description: (Required) The TCP port to connect to. 
                        required: [port]
                      initialDelaySeconds:
                        type: integer
                        description: (Optional) Number of seconds after the container has started before probes are initiated.
                      terminationGracePeriodSeconds:
                        type: integer
                        description: (Optional) Number of seconds the container needs to terminate gracefully upon probe failure. The grace period amount of tie between when a container is sent a termination signal and the time when the processes are forcibly halted with a kill signal. 
                      periodSeconds:
                        type: integer
                        description: (Optional) How often to perform the probe. Assumed to be 10 seconds if not specified.
                      timeoutSeconds:
                        type: integer
                        description: (Optional) Number of seconds after which the probe times out. Assumed to be 1 second if not specified.
                      failureThreshold:
                        type: integer
                        decription: (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Assumed to be 3 if not specified.
                      successThreshold: 
                        type: integer
                        description: (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Assumed to be 1 if not specified.
                required: [image]
            # New
            initContainers:
              # Equivilent properties: 
                #     Kubernetes: pod.spec.initContainers[]
                #     ECS Task: TaskDefinition.containerDefinitions[].dependsOn
                #     ACI Container Group: containerGroups.initContainers[]
                #     ACA Container App: containerApps.template.initContainer[]
                #     Google Cloud Run: Not available
              type: array
              description:
              items:
                type: object
                properties: 
                  # TODO: Include same properties as containers. 
                  # Confirmed with @lakshmimsft that Radius Resource Type definitions do not support object references
            # Change: extensions.manualScaling.replicas --> replicas
            replicas: 
              # Equivilent properties: 
                #     Kubernetes: deployment.spec.replicas
                #     ECS Task: ServiceDefinition.desiredCount
                #     ACI Container Group: ngroups.properties.elasticProfile.desiredCount
                #     ACA Container App: containerApps.template.container[]
                #     Google Cloud Run: Service.spec.template.scale.minReplicas
              type: integer
              description: (Optional) The minimum number of replicas for the set of containers. 
            # Future functionality. Will require the recipe to implement horizontal pod autoscalers.
            # autoScaling:
            #   type: object
            #   properties:
            #     maxReplicas:
            #       type: integer
            #       description: (Optional) The maximum number of replicas for the autoscaler.
            #     metric:
            #       type: object
            #       description: (Required) The metric to measure and target used to autoscale. 
            #       additionalProperties:
            #         kind:
            #           type: string
            #           enum: [cpu, memory, custom]
            #           description: (Required) The metric to measure. 
            #         customMetric: 
            #           type: string
            #           description: (Optional) The custom metric exposed by the application. Implementation specific. See platform engineer for further guidance.
            #         target:
            #           type: object
            #           description: (Required) When the metric exceeds the target value specified, autoscaling is triggered. Only one target value can be specified dependent upon the type.
            #           properties:
            #             averageUtilization:
            #               type: integer
            #               description: (Optional) The average CPU or memory utilization across all containers expressed as a percentage. Kind must be CPU or memory.
            #             averageValue:
            #               type: integer
            #               description: (Optional) The average value of the metric as a quantity.
            #             value:
            #               type: integer
            #               description: (Optional) The absolute value of the metric as a quantity.
            #       required: [kind, target]
            #     required: [metric]
            required: [environment, application, container]